dist: xenial
language: python
matrix:
  include:
    - name: "Python 3.6 on Xenial Linux"
      python: '3.6'

    - name: "Python 3.7 on Xenial Linux"
      python: '3.7'

    - name: "Miniconda 3.6 on Xenial Linux"
      env: ANACONDA="3.6"

    - name: "Miniconda 3.7 on Xenial Linux"
      env: ANACONDA="3.7"

before_install:
- sudo apt-get update;
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    sudo apt-get build-dep python-scipy;
    MINICONDA_OS="Linux";
  fi

install:
- if [[ -z ${ANACONDA} ]]; then
      pip install -r requirements.txt;
      pip install -r tests/requirements.txt;
      pip install coveralls;
    else
      wget https://repo.anaconda.com/miniconda/Miniconda3-latest-$MINICONDA_OS-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      export PATH="$HOME/miniconda/bin:$PATH";
      hash -r;
      conda config --set always_yes yes --set changeps1 no;
      export BASE_PYTHON=`python -c 'import sys; version=sys.version_info[:3]; print("{0}.{1}.{2}".format(*version))'`;
      echo "Base Anaconda Python is $BASE_PYTHON";
      echo "Creating Anaconda Python $ANACONDA conda environment";
      conda update -n base conda --yes;
      conda config --add channels conda-forge;
      conda env create -f tests/requirements.txt -n yellowbrick python=$ANACONDA;
      source activate yellowbrick;
      conda install coveralls;
  fi

script:
- python -m nltk.downloader popular
- make test

after_success: coveralls

notifications:
  slack:
    secure: AfQ3fbiBTZZaRS8i+oTCs9F2Z8+kkKLX8ymi1OGpRA91As1A3c0CrXfZ+7wBh5IpdF0FFTZh5EH26+M63Fs5DX3uYNJeZzosv0H/xdw/zY0DeD4/SXVisHeOjv6Zn5TI2uYuKqHmHke/UJ3tl/p+GhTWFJBTgSXhXYNtGc8K1sOINr+GjS5uylwD3RAFJDQ/ABuwxH6iJCBANDtCJErKtbMSaHl3HpajL7YNgPBInAQSEMwx7bOke4gAoQBizpCzNoo25pHSWXvkAvlEg6MklUFapETOwBCgiQkZr5eNCSviEOjuM84rvn/7pG7dbA03R8Ax0fQ8ILkIKTKN4Wrm8AxbELnajPJyz+grMKbBmzDOKmqw+y7iewVyRrfj9hVtp5E5DBm5GrYtnVU7oamOkjM3cSrkCEJEEjbzEzKQv978N1E1ZdixQ17cp7GYVkhkixhZ3nXFI0XFhDYsIq5rokdIdgEHo9bTERzw6awlVGxordMe2FxavKB4fWi5CIQmOdXY5Tc3GAYfmvYjq3MQ9ACBLTF75rQbX8DYLaqOAMWMa6Q4HnBeiark4nZJNt2HKfDUL7B9OA8LTaK/ttUBt0xCt6iKCwpRHL+kZTgiUfjwfJXoufsB07Z7TtUcJ8t6+aebdd/Pap9LwBk379UrHFKQEZ6DkK1hHOMaqAC5cOQ=
